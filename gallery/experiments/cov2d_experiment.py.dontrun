#!/usr/bin/env  python
"""
This script illustrates denoising 2D images using batched Cov2D class
from experime dataset and outputing to mrcs file.
"""

import logging

from aspire.basis import FFBBasis2D
from aspire.denoising.denoiser_cov2d import DenoiserCov2D
from aspire.noise import AnisotropicNoiseEstimator
from aspire.source.relion import RelionSource

logger = logging.getLogger(__name__)


# Set input path and files and initialize other parameters
DATA_FOLDER = "/path/to/untarred/empiar/dataset/"
STARFILE_IN = "/path/to/untarred/empiar/dataset/input.star"
STARFILE_OUT = "/path/to/output/ouput.star"
PIXEL_SIZE = 1.34
MAX_ROWS = 1024
MAX_RESOLUTION = 60

# Create a source object for 2D images
logger.info(f"Read in images from {STARFILE_IN} and preprocess the images.")
source = RelionSource(
    STARFILE_IN, DATA_FOLDER, pixel_size=PIXEL_SIZE, max_rows=MAX_ROWS
)

# Downsample the images
logger.info(f"Set the resolution to {MAX_RESOLUTION} X {MAX_RESOLUTION}")
if MAX_RESOLUTION < source.L:
    source.downsample(MAX_RESOLUTION)
else:
    logger.warn(f"Unable to downsample to {max_resolution}, using {source.L}")


# Specify the fast FB basis method for expending the 2D images
basis = FFBBasis2D((source.L, source.L))

# Estimate the noise of images
logger.info(f"Estimate the noise of images using anisotropic method")
noise_estimator = AnisotropicNoiseEstimator(source)
var_noise = noise_estimator.estimate()
logger.info(f"var_noise before whitening {var_noise}")

# Whiten the noise of images
logger.info(f"Whiten the noise of images from the noise estimator")
source.whiten(noise_estimator.filter)
#   Note this changes the noise variance,
#   flattening spectrum and converging towards 1.
#   Noise variance will be recomputed in DenoiserCov2D by default.

logger.info(f"Denoise the images using batched cov2D method.")
denoiser = DenoiserCov2D(source, basis)
denoised_src = denoiser.denoise(batch_size=512)
denoised_src.save(STARFILE_OUT, batch_size=512, save_mode="single", overwrite=False)
