#!/usr/bin/env  python3.6
"""
This script illustrates denoising 2D images using batched Cov2D class
from experime dataset and outputing to mrcs file.
"""

from aspire.basis.ffb_2d import FFBBasis2D
from aspire.denoising.denoiser_cov2d import DenoiserCov2D
from aspire.estimation.noise import AnisotropicNoiseEstimator
from aspire.source.relion import RelionSource


# Set input path and files and initialize other parameters
data_folder = '/path/to/untarred/empiar/dataset/'
starfile_in = '/path/to/untarred/empiar/dataset/input.star'
starfile_out = '/path/to/output/ouput.star'
pixel_size = 1.34
max_rows = 1024
max_resolution = 60

# Create a source object for 2D images
print(f'Read in images from {starfile_in} and preprocess the images.')
source = RelionSource(
    starfile_in,
    data_folder,
    pixel_size=pixel_size,
    max_rows=max_rows
)

# Downsample the images
print(f'Set the resolution to {max_resolution} X {max_resolution}')
if max_resolution < source.L:
    source.downsample(max_resolution)

# Specify the fast FB basis method for expending the 2D images
basis = FFBBasis2D((max_resolution, max_resolution))

# Estimate the noise of images
print(f'Estimate the noise of images using anisotropic method')
noise_estimator = AnisotropicNoiseEstimator(source)

# Whiten the noise of images
print(f'Whiten the noise of images from the noise estimator')
source.whiten(noise_estimator.filter)
var_noise = noise_estimator.estimate()

print(f'Denoise the images using batched cov2D method.')
denoiser = DenoiserCov2D(source, basis, var_noise)
denoised_src = denoiser.denoise(batch_size=512)
denoised_src.save(starfile_out, batch_size=512, save_mode='single', overwrite=False)
