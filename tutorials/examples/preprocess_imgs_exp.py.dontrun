#!/usr/bin/env  python3.6
"""
This script illustrates how to preprocess experimental CryoEM images
before starting the pipeline of reconstructing 3D map.
"""

import matplotlib.pyplot as plt

from aspire.source.relion import RelionSource
from aspire.estimation.noise import WhiteNoiseEstimator


# Set input path and files and initialize other parameters
data_folder = '/path/to/untarred/empiar/dataset/'
STARFILE_IN = '/path/to/untarred/empiar/dataset/input.star'
pixel_size = 1.34
num_imgs = 100

print('This script illustrates how to preprocess experimental CryoEM images')
print(f'Read in images from {STARFILE_IN} and preprocess the images')
source = RelionSource(
    STARFILE_IN,
    data_folder,
    pixel_size=pixel_size,
    max_rows=num_imgs
)

# number of images to extract for plotting
nimgs_ext = 1

print('Obtain original images')
imgs_od = source.images(start=0, num=nimgs_ext)

print('Perform phase flip to input images')
source.phase_flip()
imgs_pf = source.images(start=0, num=nimgs_ext)

max_resolution = 60
print(f'Downsample resolution to {max_resolution} X {max_resolution}')
source.downsample(max_resolution)
imgs_ds = source.images(start=0, num=nimgs_ext)

print('Normalize images to noise background')
source.normalize_background()
imgs_nb = source.images(start=0, num=nimgs_ext)

print('Whiten noise of images')
noise_estimator = WhiteNoiseEstimator(source)
source.whiten(noise_estimator.filter)
imgs_wt = source.images(start=0, num=nimgs_ext)

print('Invert global density contrast')
source.invert_contrast()
imgs_rc = source.images(start=0, num=nimgs_ext)

# plot the first images
print('plot the first images')
idm = 0
plt.subplot(2, 3, 1)
plt.imshow(imgs_od[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('original image')

plt.subplot(2, 3, 2)
plt.imshow(imgs_pf[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('phase flip')

plt.subplot(2, 3, 3)
plt.imshow(imgs_ds[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('downsample')

plt.subplot(2, 3, 4)
plt.imshow(imgs_nb[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('normalize background')

plt.subplot(2, 3, 5)
plt.imshow(imgs_wt[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('noise whitening')

plt.subplot(2, 3, 6)
plt.imshow(imgs_rc[idm], cmap='gray')
plt.colorbar(orientation='horizontal')
plt.title('invert contrast')
plt.show()
