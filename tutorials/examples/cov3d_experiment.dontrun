#!/usr/bin/env  python
"""
This script illustrates Cov3D analysis using experimental dataset
"""
import numpy as np

from aspire.basis import FBBasis3D
from aspire.covariance import CovarianceEstimator
from aspire.noise import AnisotropicNoiseEstimator
from aspire.reconstruction import MeanEstimator
from aspire.source.relion import RelionSource
from aspire.utils import eigs
from aspire.volume import Volume

# Set input path and files and initialize other parameters
DATA_FOLDER = "/path/to/untarred/empiar/dataset/"
STARFILE = "/path/to/untarred/empiar/dataset/input.star"
PIXEL_SIZE = 5.0
MAX_ROWS = 1024
MAX_RESOLUTION = 8
CG_TOL = 1e-5

# Set number of eigen-vectors to keep
NUM_EIGS = 16

# Create a source object for experimental 2D images with estimated rotation angles
print(f"Read in images from {STARFILE} and preprocess the images.")
source = RelionSource(
    STARFILE, data_folder=DATA_FOLDER, pixel_size=PIXEL_SIZE, max_rows=MAX_ROWS
)

# Downsample the images
print(f"Set the resolution to {MAX_RESOLUTION} X {MAX_RESOLUTION}")
if MAX_RESOLUTION < source.L:
    source.downsample(MAX_RESOLUTION)

# Estimate the noise of images
print("Estimate the noise of images using anisotropic method")
noise_estimator = AnisotropicNoiseEstimator(source, batchSize=512)

# Whiten the noise of images
print("Whiten the noise of images from the noise estimator")
source.whiten(noise_estimator.filter)
# Estimate the noise variance. This is needed for the covariance estimation step below.
noise_variance = noise_estimator.estimate()
print(f"Noise Variance = {noise_variance}")

# Specify the fast FB basis method for expanding the 2D images
basis = FBBasis3D((MAX_RESOLUTION, MAX_RESOLUTION, MAX_RESOLUTION), dtype=source.dtype)

mean_estimator = MeanEstimator(source, basis, batch_size=512)
mean_est = mean_estimator.estimate()

# Passing in a mean_kernel argument to the following constructor speeds up some calculations
covar_estimator = CovarianceEstimator(source, basis, mean_kernel=mean_estimator.kernel)
covar_est = covar_estimator.estimate(mean_est, noise_variance, tol=CG_TOL)

# Extract the top eigenvectors and eigenvalues of the covariance estimate.
eigs_est, lambdas_est = eigs(covar_est, NUM_EIGS)
for i in range(NUM_EIGS):
    print(f"Top {i}th eigen value: {lambdas_est[i, i]}")

# Eigs should probably return a Volume, for now hack it.
# move the last axis to the first
eigs_est_c = np.moveaxis(eigs_est, -1, 0)
eigs_est = Volume(eigs_est_c)
