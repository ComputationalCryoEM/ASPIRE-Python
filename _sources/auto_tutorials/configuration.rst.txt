
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/configuration.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_configuration.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_configuration.py:


ASPIRE Configuration
====================

This tutorial reviews the default ASPIRE configuration
and common patterns for overriding.

.. GENERATED FROM PYTHON SOURCE LINES 10-21

Default Configuration
---------------------
ASPIRE uses the `confuse library`_ for managing configuration.
While this document should cover common uses,
advanced users and developers should consider reviewing their documentation.

The ASPIRE package ships with ``config_default.yaml``.
This represents a base configuration.
The shipped configuration for this version of ASPIRE is:

.. literalinclude:: ../../../src/aspire/config_default.yaml

.. GENERATED FROM PYTHON SOURCE LINES 24-45

System Overrides
----------------
From here we can override with a persistent custom config file in
your home dir, specifically ``$HOME/.config/ASPIRE/config.yaml`` on
most Linux platforms.
Items in this file will take precedence over the default configuration.
For other platforms, refer to the `confuse` documentation.

As an example, suppose you want to change the ``common`` section's
``numeric`` and ``fft`` variables to enable GPU acceleration when
working on a specific machine.
By creating ``$HOME/.config/ASPIRE/config.yaml`` with the following contents
on that machine, ASPIRE's configuration utility will overload
the ``numeric`` and ``fft`` settings.

    .. code-block:: yaml

      common:
        numeric: cupy
        fft: cupy


.. GENERATED FROM PYTHON SOURCE LINES 47-70

Override Configuration Directory
--------------------------------
Users may specify a directory containing the configuration file.
This is done by using the enviornment variable ``ASPIREDIR``
If you wanted a file in your working directory to take
precedence over system-overrides, we can create a local ``config.yaml``.

Suppose you want to store ASPIRE logs at ``/tmp/my_proj/aspire_logs``
when working on a specific project. Create the following ``config.yaml``.

    .. code-block:: yaml

      logging:
        log_dir: /tmp/my_proj/aspire_logs

This directory must then be set before invoking any code.

    .. code-block:: bash

      export ASPIREDIR=$PWD

Similarly, you could specify any directory you like that might contain a configuration.
This allows you to store configurations for reuse.

.. GENERATED FROM PYTHON SOURCE LINES 72-86

In-Code Overrides
-----------------
You can also specify your own file from an arbitrary location from within Python code.
For precise behavior refer to the confuse documentation.

    .. code-block:: python

      aspire.config.set_file('/path/to/some_experimental_config.yaml')


Or simply set specific variables as needed.
Here we will disable progress bars displayed by
``aspire.utils.trange`` and ``aspire.utils.tqdm``.


.. GENERATED FROM PYTHON SOURCE LINES 86-108

.. code-block:: Python


    import time

    from aspire import config
    from aspire.utils import trange

    # Progress bars are displayed by default.

    print("Disabling progress bars")
    config["logging"]["tqdm_disable"] = True

    for _ in trange(3):
        time.sleep(1)
    print("Done Loop 1\n")

    print("Re-enabling progress bars")
    config["logging"]["tqdm_disable"] = False

    for _ in trange(3):
        time.sleep(1)
    print("Done Loop 2\n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Disabling progress bars
    Done Loop 1

    Re-enabling progress bars
      0%|          | 0/3 [00:00<?, ?it/s]     33%|███▎      | 1/3 [00:01<00:02,  1.00s/it]     67%|██████▋   | 2/3 [00:02<00:01,  1.00s/it]    100%|██████████| 3/3 [00:03<00:00,  1.00s/it]    100%|██████████| 3/3 [00:03<00:00,  1.00s/it]
    Done Loop 2





.. GENERATED FROM PYTHON SOURCE LINES 109-138

Enabling GPU Acceleration
-------------------------
Enabling GPU acceleration requires installing supporting software
packages and small config changes. Installing the supporting
software is most easily accomplished by installing ASPIRE with one
of the published GPU extensions, for example ``pip install
"aspire[dev,gpu_12x]"``.  Once the packages are installed users
should find that the NUFFT calls are automatically running on the
GPU.  Additional acceleration is achieved by enabling `cupy` for
`numeric` and `fft` components.

   .. code-block:: yaml

     common:
         # numeric module to use - one of numpy/cupy
         numeric: cupy
         # fft backend to use - one of pyfftw/scipy/cupy/mkl
         fft: cupy

Alternatively, like other config options, this can be changed
dynamically with code.

   .. code-block:: python

     from aspire import config

     config["common"]["numeric"] = "cupy"
     config["common"]["fft"] = "cupy"


.. GENERATED FROM PYTHON SOURCE LINES 140-147

Resolution
----------
ASPIRE logs the ``config_dir()`` for your system at startup,
along with the configuration sources and resolved configuration at import time.
This should give an accurate snapshot of the configuration before any in-code overrides.
To view these as saved in your log, you will need to locate your `log_dir`.
If you are not sure where it is, we can ask the config:

.. GENERATED FROM PYTHON SOURCE LINES 147-152

.. code-block:: Python


    import aspire

    print(aspire.config["logging"]["log_dir"].as_filename())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/ASPIRE-Python/ASPIRE-Python/gallery/tutorials/logs




.. GENERATED FROM PYTHON SOURCE LINES 153-154

You can also resolve the config in code

.. GENERATED FROM PYTHON SOURCE LINES 154-156

.. code-block:: Python

    print(aspire.config.dump())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    logging:
        tqdm_disable: no
        log_dir: /home/runner/work/ASPIRE-Python/ASPIRE-Python/gallery/tutorials/logs
        log_exceptions: 1
        console_level: INFO
        log_file_level: DEBUG
        log_prefix: aspire

    cache:
        cache_dir: /home/runner/.cache/ASPIRE-data
        grid_cache_size:
        filter_cache_size: 2
    version: 0.14.0
    common:
        numeric: numpy
        fft: scipy

    nufft:
        backends: [cufinufft, finufft, pynfft]





.. GENERATED FROM PYTHON SOURCE LINES 157-195

Logging preferences
-------------------
The "Logging" section contains options for controlling the verbosity and destination of log messages generated by ASPIRE.

By default, the ``log_dir`` is a directory called ``logs`` within the current working directory from which ASPIRE was invoked, but
it can be changed to an absolute path (for instance, to go to the same folder as a custom configuration file stored elsewhere, such
as in the example above):

   .. code-block:: yaml

     logging:
         log_dir=/tmp/my_proj/aspire_logs

ASPIRE directs output streams to both the console and to a log file during each session. The logging verbosity for both of these
can be specified individually via ``console_level`` and ``log_file_level``. These levels are passed through to Python's logging
system, so the labels are the same: ``"DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"``. In general, it may make sense to have the log file
store more verbose output than the console. By default, only ``INFO`` and above level messages are printed to the terminal, while
detailed ``DEBUG`` messages are saved to disk:

   .. code-block:: yaml

     logging:
         console_level: INFO
         log_file_level: DEBUG

The following modification would save all ``DEBUG`` messages to the log file, but only print ``ERROR`` and ``CRITICAL`` messages
in the terminal:

   .. code-block:: yaml

     logging:
         console_level: ERROR
         log_file_level: DEBUG

By default, the filename of the log file is ``aspire-{%Y-%m-%dT%H-%M-%S.%f}.log``. The prefix before the timestamp can be customized
via the ``log_prefix`` option.

More details on logging behavior in Python can be found in the `Python logging HOWTO`_.

.. GENERATED FROM PYTHON SOURCE LINES 197-206

Advanced logging options
------------------------
Users with sophisticated knowledge of Python's ``logging`` library are able to directly work with the ``logging.conf`` file stored in
``src/aspire`` in the source.

.. literalinclude:: ../../../src/aspire/logging.conf

This file exposes options that ASPIRE's ``config.yaml`` does not, for example the precise formatting options for log messages. However,
values from ASPIRE's configuration are passed through this file, so caution is needed when modifying it.

.. GENERATED FROM PYTHON SOURCE LINES 209-210

.. _Python logging HOWTO: https://docs.python.org/3/howto/logging.html

.. GENERATED FROM PYTHON SOURCE LINES 212-213

.. _confuse library: https://confuse.readthedocs.io/en/latest/index.html


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.796 seconds)


.. _sphx_glr_download_auto_tutorials_configuration.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: configuration.ipynb <configuration.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: configuration.py <configuration.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: configuration.zip <configuration.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
