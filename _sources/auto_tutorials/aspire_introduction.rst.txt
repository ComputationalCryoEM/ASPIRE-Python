
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/aspire_introduction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_aspire_introduction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_aspire_introduction.py:


ASPIRE-Python Introduction
==========================

In this notebook we will introduce the core API components, then
demonstrate basic usage corresponding to topics from Princeton's
MAT586.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

Installation
------------

ASPIRE can generally install on Linux, Mac, and Windows under
Anaconda Python, by following the instructions in the README.  `The
instructions for developers is the most comprehensive
<https://github.com/ComputationalCryoEM/ASPIRE-Python/blob/main/README.md#for-developers>`_.
Windows is provided, but generally Linux and MacOS are recommended,
with Linux being the most diversely tested platform.


.. GENERATED FROM PYTHON SOURCE LINES 23-32

Princeton Research Computing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ASPIRE requires some resources to run, so if you wouldn't run
typical data science codes on your machine (a netbook for example),
you may use Tiger/Adroit/Della at Princeton or another cluster.
After logging into Tiger, ``module load anaconda3/2020.7`` and
continue to follow the Anaconda instructions for developers in the
link above.  Those instructions should create a working environment
for tinkering with ASPIRE code found in this notebook.

.. GENERATED FROM PYTHON SOURCE LINES 34-39

Imports
^^^^^^^
First we import some typical scientific computing packages.
Along the way we will import relevant components from ``aspire``.
Users may also import ``aspire`` once as a top level package.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: Python


    import os

    import matplotlib.pyplot as plt
    import numpy as np

    import aspire
    from aspire.image import Image








.. GENERATED FROM PYTHON SOURCE LINES 49-57

API Primitives
--------------
The ASPIRE framework is a collection of modules containing
interoperable extensible components.  Underlying the more
sophisticated components and algorithms are some core data
structures.  Sophisticated components are designed to interoperate
by exchanging, consuming, or producing these basic structures.  The
most common structures encountered when starting out are:

.. GENERATED FROM PYTHON SOURCE LINES 59-78

.. list-table:: Core API Components
   :header-rows: 1

   * - Component
     - Description
   * - ``Coef``
     - Utility class for stacks of 1D arrays.
   * - ``Image``
     - Utility class for stacks of 2D arrays.
   * - ``Volume``
     - Utility class for stacks of 3D arrays.
   * - ``Rotations``
     - Utility class for stacks of 3D rotations.
   * - ``Filter``
     - Constructs and applies Image filters.
   * - ``Basis``
     - Basis conversions and operations.
   * - ``Source``
     - Produces primitive components. ``ImageSource`` produces ``Image`` instances.

.. GENERATED FROM PYTHON SOURCE LINES 81-91

``Image`` Class
---------------

The `Image
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.image.html#aspire.image.image.Image>`_
class is a thin wrapper over Numpy arrays for a stack containing 1
or more images (2D data).  In this notebook we won't be working
directly with the ``Image`` class a lot, but it will be one of the
fundamental structures behind the scenes.  A lot of ASPIRE code
passes around ``Image`` and ``Volume`` instances.

.. GENERATED FROM PYTHON SOURCE LINES 93-94

Create an ``Image`` instance from random data.

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: Python

    img_data = np.random.random((100, 100))
    img = Image(img_data)
    print(f"img shape: {img.shape}")  # Note this produces a stack of one.
    print(f"str(img): {img}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    img shape: (1, 100, 100)
    str(img): 1 float64 images arranged as a (1,) stack each of size 100x100.




.. GENERATED FROM PYTHON SOURCE LINES 100-101

Create an Image for a stack of 3 100x100 images.

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: Python

    img_data = np.random.random((3, 100, 100))
    img = Image(img_data)








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Most often, Images will behave like Numpy arrays, but you
explicitly access the underlying Numpy array via ``asnumpy()``.

.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: Python

    img.asnumpy()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[[0.17926842, 0.23442425, 0.11122467, ..., 0.33703458,
             0.92839546, 0.21209528],
            [0.34852741, 0.18140697, 0.61693189, ..., 0.58940792,
             0.72404572, 0.07033583],
            [0.7419218 , 0.53671354, 0.04207188, ..., 0.77964905,
             0.77978325, 0.90339082],
            ...,
            [0.0769454 , 0.72569961, 0.3798081 , ..., 0.60363726,
             0.15825227, 0.02546558],
            [0.7517652 , 0.02787124, 0.94908886, ..., 0.93974855,
             0.32018527, 0.39742053],
            [0.87214372, 0.5880587 , 0.52829656, ..., 0.29224962,
             0.98938535, 0.1422197 ]],

           [[0.4237803 , 0.64324853, 0.55930321, ..., 0.37769061,
             0.55196319, 0.84199591],
            [0.74276796, 0.02134176, 0.07099057, ..., 0.45084177,
             0.80798685, 0.38259108],
            [0.74667873, 0.00592862, 0.78390751, ..., 0.33958005,
             0.17086899, 0.65023688],
            ...,
            [0.83544889, 0.86056949, 0.52522904, ..., 0.98036088,
             0.20434665, 0.59376241],
            [0.15848847, 0.19845972, 0.09055566, ..., 0.66199049,
             0.81725275, 0.86659319],
            [0.38035375, 0.95098657, 0.89958771, ..., 0.37628937,
             0.36747308, 0.18192729]],

           [[0.99931826, 0.00597726, 0.63195184, ..., 0.70027676,
             0.60484293, 0.81734429],
            [0.34468079, 0.42404529, 0.84717965, ..., 0.2318747 ,
             0.74735491, 0.05506637],
            [0.94202227, 0.31634218, 0.67706271, ..., 0.2288052 ,
             0.6809044 , 0.63321254],
            ...,
            [0.06147749, 0.37177172, 0.96272942, ..., 0.96672961,
             0.68744133, 0.97190229],
            [0.25102087, 0.51623779, 0.41357798, ..., 0.59672626,
             0.37281572, 0.3663904 ],
            [0.47893276, 0.5555181 , 0.58141855, ..., 0.74749324,
             0.67055209, 0.58224211]]])



.. GENERATED FROM PYTHON SOURCE LINES 110-112

Images have a built in ``show()`` method, which works well for
peeking at data.

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: Python

    img.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_001.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. note::
    The user is responsible for using ``show`` responsibly.  Avoid
    asking for large numbers of images that you would not normally
    plot.  Ten or less is reasonable.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

More examples using the Image class can be found in:

- :ref:`sphx_glr_auto_tutorials_tutorials_image_class.py`
- :ref:`sphx_glr_auto_tutorials_tutorials_basic_image_array.py`

.. GENERATED FROM PYTHON SOURCE LINES 128-135

``Volume`` Class
----------------

Like ``Image``, the `Volume
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.volume.html#aspire.volume.Volume>`_
class is a thin wrapper over Numpy arrays that provides specialized
methods for a stack containing one or more volumes (3D data).

.. GENERATED FROM PYTHON SOURCE LINES 137-154

Initialize Volume - ``load``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A ``Volume`` may be instantiated with Numpy data similarly to
``Image``.  Both ``Image`` and ``Volume`` provide ``save`` and
``load`` methods which can be used to work with files.  For
``Volumes`` ``.map`` and ``.mrc`` are currently supported.  For
``.npy``, Numpy can be used.

For example, in the following note we demonstrate instantiating an ASPIRE Volume
instance using ``Volume.load()``:

.. note::
   Instantiate an ASPIRE Volume from file::

       from aspire.volume import Volume

       aspire_volume = Volume.load("/path/to/volume.mrc")

.. GENERATED FROM PYTHON SOURCE LINES 156-160

In addition to the ``Volume.load()`` method, a few common
starting datasets can be downloaded from EMDB using ASPIRE's downloading
utility. Below we download the high resolution volume map EMDB-2660, sourced from
`<https://www.ebi.ac.uk/pdbe/entry/emdb/EMD-2660>`_.

.. GENERATED FROM PYTHON SOURCE LINES 160-165

.. code-block:: Python


    from aspire.downloader import emdb_2660

    vol = emdb_2660()








.. GENERATED FROM PYTHON SOURCE LINES 166-170

Downsample Volume
^^^^^^^^^^^^^^^^^
Here we downsample the above volume to a desired image size (64
should be good).

.. GENERATED FROM PYTHON SOURCE LINES 170-179

.. code-block:: Python


    img_size = 64

    # Volume.downsample() returns a new Volume instance.
    #   We will use this lower resolution volume later, calling it `v2`.
    vol_ds = vol.downsample(img_size)
    # L is often used as short hand for image and volume sizes (in pixels/voxels).
    L = vol_ds.resolution








.. GENERATED FROM PYTHON SOURCE LINES 180-184

Plot Data
"""""""""
For quick sanity checking purposes we can view some plots.
  We'll use three orthographic projections, one per axis.

.. GENERATED FROM PYTHON SOURCE LINES 184-189

.. code-block:: Python

    orthographic_projections = np.empty((3, L, L), dtype=vol_ds.dtype)
    for i in range(3):
        orthographic_projections[i] = np.sum(vol_ds, axis=(0, i + 1))
    Image(orthographic_projections).show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_002.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 190-206

``Rotation`` Class
------------------
While you may bring your own 3x3 matrices or generate manually (say
from your own Euler angles), ASPIRE has a `Rotation class
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.utils.html#module-aspire.utils.rotation>`_
which can do this random rotation generation for us.  It also has
some other utility methods, including support for Rodrigues
rotations (ie, axis-angle).  Other ASPIRE components dealing with 3D
rotations will generally expect instances of ``Rotation``.

A common task in computational cryo-EM is generating random
projections, by applying random 3D rotations to a volume and projecting along the z-axis.
The following code will generate some random rotations,
and use the ``Volume.project()`` method to return an ``Image``
instance representing the stack of projections.  We can display
projection images using the ``Image.show()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 206-212

.. code-block:: Python


    from aspire.utils import Rotation

    num_rotations = 2
    rots = Rotation.generate_random_rotations(n=num_rotations, seed=12345)








.. GENERATED FROM PYTHON SOURCE LINES 213-214

We can access the Numpy array holding the actual stack of 3x3 matrices:

.. GENERATED FROM PYTHON SOURCE LINES 214-217

.. code-block:: Python

    print(rots)
    print(rots.matrices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Rotation stack consisting of 2 elements of float32 type
    [[[ 0.34373102 -0.62564886  0.7002946 ]
      [-0.61950386 -0.7115173  -0.33159938]
      [ 0.70573646 -0.3198542  -0.63216245]]

     [[ 0.3189953   0.88963485 -0.3267902 ]
      [ 0.67460066  0.02905637  0.7376108 ]
      [ 0.6656996  -0.45574725 -0.5908794 ]]]




.. GENERATED FROM PYTHON SOURCE LINES 218-220

Using the ``Volume.project()`` method we compute
projections using the stack of rotations:

.. GENERATED FROM PYTHON SOURCE LINES 220-223

.. code-block:: Python

    projections = vol.project(rots)
    print(projections)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2 float32 images arranged as a (2,) stack each of size 360x360 with pixel_size=1.340000033378601 angstroms.




.. GENERATED FROM PYTHON SOURCE LINES 224-225

``project()`` returns an Image instance, so we can call ``show``.

.. GENERATED FROM PYTHON SOURCE LINES 225-227

.. code-block:: Python

    projections.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_003.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 228-231

Neat, we've generated random projections of some real data.  This
tutorial will go on to show how this can be performed systematically with
other cryo-EM data simulation tasks.

.. GENERATED FROM PYTHON SOURCE LINES 233-242

The ``filter`` Package
----------------------
`Filters
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.operators.html#module-aspire.operators.filters>`_
are a collection of classes which once configured can be applied to
``Images``, typically in an ``ImageSource`` pipeline which will be
discussed in a later section.  Specifically, applying a ``Filter``
convolves the filter with the images contained in the ``Image``
instance.

.. GENERATED FROM PYTHON SOURCE LINES 244-263

.. mermaid::

  classDiagram
      class Filter{
          +evaluate()
          +basis_mat()
          +scale()
          +evaluate_grid()
          +dual()
          +sign()
       }

       Filter o-- FunctionFilter
       Filter o-- ArrayFilter
       Filter o-- ScalarFilter
       Filter o-- ZeroFilter
       Filter o-- IdentityFilter
       Filter o-- CTFFilter
       CTFFilter o-- RadialCTFFilter

.. GENERATED FROM PYTHON SOURCE LINES 266-273

``CTFFilter`` and ``RadialCTFFilter`` are the most common filters
encountered when starting out and are detailed in
:ref:`sphx_glr_auto_tutorials_tutorials_ctf.py`.  The other filters
are used behind the scenes in components like ``NoiseAdders`` or
more advanced customized pipelines.  Several filters for internal or
advanced use cases are omitted from the diagram, but can be found in
the `aspire.operators.filter` module.

.. GENERATED FROM PYTHON SOURCE LINES 275-292

``Basis``
---------
ASPIRE provides a selection of ``Basis`` classes designed for
working with cryo-EM data in two and three dimensions.  Most of
these basis implementations are optimized for efficient rotations,
often called the *"steerable"* property.  As of this writing most
algorithms in ASPIRE are written to work well with the fast
Fourier-Bessel (FFB) basis classes ``FFBBasis2D`` and
``FFBBasis3D``.  These correspond to direct slower reference
``FBBasis2D`` and ``FBBasis3D`` classes.

Recently, a related Fourier-Bessel method using fast Laplacian
eigenfunction (FLE) transforms was integrated as ``FLEBasis2D``.
Additional prolate spheroidal wave function (PSWF) methods are
available via ``FPSWFBasis2D`` and ``FPSWFBasis3D``, but their
integration into other components like 2D covariance analysis is
incomplete, and slated for a future release.

.. GENERATED FROM PYTHON SOURCE LINES 294-325

The ``source`` Package
----------------------

The `aspire.source
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.source.html#module-aspire.source.simulation>`_
package contains a collection of data source interfaces.
Ostensibly, a ``Source`` is a producer of some primitive type, most
notably ``Image``.  ASPIRE components that consume (process) images
are designed to accept an ``ImageSource``.

The first reason for this is to normalize the way a wide variety of
higher-level components interface.  ``ImageSource`` instances have a
consistent property ``images`` which must be implemented to serve up
images dynamically using a square-bracket ``[]`` syntax familiar to
Numpy users. This supports batch computation among other things.
``Source`` instances also store and serve up metadata like
`rotations`, `dtype`, and support pipelining transformations.

The second reason is so we can design an experiment using a
synthetic ``Simulation`` source or our own provided Numpy arrays via
``ArrayImageSource`` and then later swap out the source for a large
experimental data set using something like ``RelionSource``.
Experimental datasets can be too large to practically fit or process
entirely in memory, and force the use of iteratively-batched
approaches.

Generally, the ``source`` package attempts to make most of this
opaque to an end user.  Ideally we can simply swap one source for
another.  For now we will build up to the creation and application
of synthetic data set based on the various manual interactions
above.

.. GENERATED FROM PYTHON SOURCE LINES 327-352

.. mermaid::

  classDiagram
      class ImageSource{
          +L
          +n
          +dtype
          ...
          +images[]
          +cache()
          +downsample()
          +whiten()
          +phase_flip()
          +invert_conrast()
          +normalize_background()
          +save()
          +save_images()
          ...
          }
      ImageSource o-- ArrayImageSource
      ImageSource o-- Simulation
      ImageSource o-- RelionSource
      ImageSource o-- CoordinateSource
      CoordinateSource o-- BoxesCoordinateSource
      CoordinateSource o-- CentersCoordinateSource

.. GENERATED FROM PYTHON SOURCE LINES 356-365

``Simulation`` Class
^^^^^^^^^^^^^^^^^^^^
Generating realistic synthetic data sources is a common task.  The
process of generating then projecting random rotations is integrated
into the `Simulation
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.source.html#module-aspire.source.simulation>`_
class.  Using ``Simulation``, we can generate arbitrary numbers of
projections for use in experiments.  Then additional features are
introduced which allow us to create more realistic data sources.

.. GENERATED FROM PYTHON SOURCE LINES 365-371

.. code-block:: Python


    from aspire.source import Simulation

    # Total images in our source.
    num_imgs = 100








.. GENERATED FROM PYTHON SOURCE LINES 372-373

Generate a Simulation instance based on the original volume data.

.. GENERATED FROM PYTHON SOURCE LINES 373-377

.. code-block:: Python

    sim = Simulation(n=num_imgs, vols=vol)
    # Display the first 10 images
    sim.images[:10].show()  # Hi Res




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_004.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 378-379

Repeat for the lower resolution (downsampled) volume vol_ds.

.. GENERATED FROM PYTHON SOURCE LINES 379-382

.. code-block:: Python

    sim = Simulation(n=num_imgs, vols=vol_ds)
    sim.images[:10].show()  # Lo Res




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_005.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 383-386

Note both of those simulations have the same rotations because they
had the same seed by default, We recreate ``sim`` with a distinct
seed to get different random samples (of rotations).

.. GENERATED FROM PYTHON SOURCE LINES 386-389

.. code-block:: Python

    sim = Simulation(n=num_imgs, vols=vol_ds, seed=42)
    sim.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_006.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 390-391

We can also view the rotations used to create these projections.

.. GENERATED FROM PYTHON SOURCE LINES 391-393

.. code-block:: Python

    print(sim.rotations)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[[ 0.13749325  0.9594606  -0.24603027]
      [ 0.9659938  -0.07497535  0.24745627]
      [ 0.21897835 -0.2716873  -0.93714166]]

     [[ 0.37807834  0.13208102  0.9163031 ]
      [ 0.40860063  0.8643426  -0.29318497]
      [-0.83072394  0.48524892  0.27282083]]

     [[ 0.86643094  0.48816934 -0.10482426]
      [ 0.0985426  -0.37300438 -0.92258173]
      [-0.48947603  0.7890237  -0.37128803]]

     [[-0.35693908  0.4585702  -0.813823  ]
      [ 0.4763827  -0.66004634 -0.58086   ]
      [-0.803526   -0.5950228   0.01714141]]

     [[ 0.1588924   0.93312883  0.32252717]
      [-0.87645537 -0.01707335  0.48118034]
      [ 0.45450985 -0.35913655  0.8151329 ]]

     [[-0.326744   -0.8130629   0.48183718]
      [-0.38360518  0.58002734  0.7186204 ]
      [-0.8637624   0.04996967 -0.5014156 ]]

     [[-0.34698084 -0.1871273   0.9190145 ]
      [ 0.5046363   0.78870445  0.35112315]
      [-0.79053557  0.5856011  -0.1792341 ]]

     [[-0.8140751  -0.093647    0.57315964]
      [-0.37379515 -0.6708314  -0.64051735]
      [ 0.44447598 -0.7356735   0.5111023 ]]

     [[ 0.45521852  0.5792567  -0.67619354]
      [ 0.29612735 -0.81470734 -0.49855852]
      [-0.83969325  0.02671365 -0.54240364]]

     [[ 0.93491715  0.32658467 -0.13882488]
      [ 0.21361436 -0.8303164  -0.5147267 ]
      [-0.28337044  0.45157185 -0.84604025]]

     [[ 0.43646738 -0.00271974  0.89971596]
      [-0.24721193 -0.9618694   0.11701906]
      [ 0.865091   -0.27349553 -0.420497  ]]

     [[ 0.06204437 -0.68872344  0.7223645 ]
      [-0.9629127  -0.23171902 -0.13822247]
      [ 0.26258266 -0.686998   -0.6775574 ]]

     [[-0.9549782  -0.1546597   0.25317377]
      [ 0.0272563  -0.8954967  -0.44423273]
      [ 0.29542118 -0.41733202  0.8593953 ]]

     [[-0.9362025  -0.29906207  0.1846258 ]
      [ 0.32780164 -0.553521    0.7656113 ]
      [-0.12677105  0.77728784  0.6162408 ]]

     [[ 0.8579973   0.32184705  0.40031877]
      [-0.46083617  0.13809925  0.8766748 ]
      [ 0.22687146 -0.93666595  0.26680756]]

     [[-0.88663757 -0.37402767  0.27198744]
      [ 0.45935175 -0.64413124  0.6116297 ]
      [-0.05357084  0.6672318   0.7429212 ]]

     [[-0.74606377  0.6106348  -0.26554468]
      [-0.55859023 -0.35687232  0.748745  ]
      [ 0.36244422  0.7069422   0.60734415]]

     [[-0.16853626  0.61572605 -0.7697252 ]
      [ 0.9855458   0.11886837 -0.12070522]
      [ 0.01717462 -0.7789427  -0.6268599 ]]

     [[ 0.7561905  -0.3324926  -0.563582  ]
      [ 0.5429612   0.7995174   0.2568366 ]
      [ 0.36519736 -0.50022054  0.785118  ]]

     [[ 0.77301854 -0.58071446 -0.25536844]
      [ 0.25237784 -0.08780504  0.9636367 ]
      [-0.5820204  -0.8093584   0.07868452]]

     [[-0.28316513 -0.7468035  -0.60174906]
      [ 0.8560133   0.08614557 -0.50972563]
      [ 0.43250293 -0.6594417   0.6148803 ]]

     [[-0.14112382  0.9097205   0.3905032 ]
      [-0.8198383  -0.32849845  0.46899253]
      [ 0.5549318  -0.25396344  0.7921826 ]]

     [[-0.456592   -0.85562974 -0.2437653 ]
      [-0.4374926  -0.02264298  0.89893687]
      [-0.7746767   0.5170929  -0.36399308]]

     [[-0.90090746  0.11707234 -0.4179232 ]
      [-0.10193092  0.8789243   0.4659422 ]
      [ 0.4218718   0.4623701  -0.7798962 ]]

     [[-0.3212181  -0.4951543  -0.80724293]
      [-0.94361854  0.2393791   0.22865206]
      [ 0.08001903  0.8351765  -0.54412967]]

     [[ 0.97377276  0.06877313  0.21687976]
      [ 0.22443578 -0.13386007 -0.96525127]
      [-0.03735181  0.98861104 -0.14578445]]

     [[ 0.3553472  -0.9034085   0.23996124]
      [ 0.5433438   0.4085248   0.7334064 ]
      [-0.76059574 -0.13023247  0.63602954]]

     [[ 0.61806667  0.37725997 -0.68968725]
      [-0.56937826  0.8197458  -0.061849  ]
      [ 0.54203504  0.4309197   0.7214612 ]]

     [[ 0.29776487  0.94447404 -0.13894196]
      [ 0.9458294  -0.31160292 -0.09116109]
      [-0.129394   -0.10427082 -0.9860957 ]]

     [[ 0.19716635  0.21056636  0.9574901 ]
      [-0.7070152  -0.64604855  0.2876643 ]
      [ 0.6791575  -0.7336778   0.0214946 ]]

     [[-0.5650244   0.29759222 -0.76953644]
      [ 0.77823645 -0.1175508  -0.616871  ]
      [-0.27403563 -0.94742846 -0.16517805]]

     [[ 0.28065488  0.8733582   0.39809337]
      [ 0.47991553 -0.48688373  0.72981185]
      [ 0.83121234 -0.01377406 -0.55578446]]

     [[ 0.8024307   0.0278064   0.5960972 ]
      [-0.15877286 -0.9529598   0.25818375]
      [ 0.5752358  -0.3018186  -0.7602692 ]]

     [[ 0.32265848 -0.30083787  0.8974342 ]
      [-0.05781392 -0.9526389  -0.29855752]
      [ 0.94474816  0.04444793 -0.32476965]]

     [[ 0.4935579  -0.7422682   0.4532532 ]
      [ 0.85551316  0.5081454  -0.09942588]
      [-0.15651786  0.4368365   0.8858194 ]]

     [[-0.8976416  -0.28571573  0.33556825]
      [-0.4102273   0.26334086 -0.87313527]
      [ 0.16109966 -0.92142177 -0.35359412]]

     [[-0.9217232   0.19335265 -0.3362159 ]
      [-0.33698434  0.02991741  0.9410348 ]
      [ 0.19201028  0.9806731   0.03758125]]

     [[ 0.24043693 -0.61969984  0.74710256]
      [ 0.35552713  0.7724179   0.5262804 ]
      [-0.90321124  0.13907798  0.40603787]]

     [[-0.7921809  -0.47242945 -0.3863416 ]
      [ 0.16552024  0.44300157 -0.88110876]
      [ 0.58741164 -0.7619449  -0.27274075]]

     [[-0.71742296  0.624828   -0.30804914]
      [-0.68107444 -0.7220424   0.12162399]
      [-0.14643046  0.29706025  0.9435642 ]]

     [[ 0.87354153 -0.40243074  0.27381516]
      [ 0.33415928  0.9048438   0.26380917]
      [-0.35392484 -0.13895038  0.9248946 ]]

     [[ 0.48421115  0.11260304 -0.8676751 ]
      [ 0.27090228 -0.96224743  0.02630238]
      [-0.83195645 -0.24779108 -0.49643534]]

     [[ 0.10466753 -0.18718329  0.9767329 ]
      [-0.49893624  0.83970237  0.21438888]
      [-0.86029494 -0.509767   -0.00550296]]

     [[ 0.62265253 -0.1254365   0.7723791 ]
      [ 0.46602726 -0.7334752  -0.49480575]
      [ 0.6285876   0.66804177 -0.39824337]]

     [[-0.07320144 -0.99607444 -0.04977208]
      [-0.4329861  -0.01321643  0.9013037 ]
      [-0.8984234   0.08752735 -0.43031895]]

     [[ 0.06439313  0.97830254 -0.19692042]
      [ 0.938444   -0.12647276 -0.32144597]
      [-0.33937648 -0.16409987 -0.92622614]]

     [[-0.32914323  0.8692355  -0.36890975]
      [-0.34743685  0.2517924   0.9032653 ]
      [ 0.87803894  0.4254765   0.21912868]]

     [[-0.03135483  0.12190171 -0.9920468 ]
      [ 0.20567426 -0.9705069  -0.12575549]
      [-0.97811806 -0.20798153  0.00535803]]

     [[ 0.7707965   0.47634456 -0.42304692]
      [ 0.46966657 -0.8735372  -0.1278519 ]
      [-0.43044877 -0.10014319 -0.89704245]]

     [[ 0.62561727 -0.6937239   0.3568615 ]
      [-0.5623879  -0.08402125  0.8225936 ]
      [-0.54066896 -0.7153234  -0.44270706]]

     [[-0.03840629 -0.82296616  0.5667907 ]
      [ 0.98650855 -0.12155963 -0.10965481]
      [ 0.15914106  0.5549324   0.8165318 ]]

     [[ 0.71410507 -0.68704677  0.13424103]
      [-0.2821377  -0.45796388 -0.8430109 ]
      [ 0.6406655   0.5641239  -0.52087617]]

     [[-0.69007146 -0.31053713  0.65373397]
      [-0.5909326   0.76325965 -0.26121518]
      [-0.41785175 -0.56656986 -0.7102102 ]]

     [[ 0.56709814 -0.23533636  0.7893139 ]
      [ 0.71543354 -0.3340903  -0.6136274 ]
      [ 0.40811095  0.9126886  -0.02109447]]

     [[ 0.12042128  0.97353137 -0.1942559 ]
      [-0.98601013  0.09457714 -0.13725595]
      [-0.1152508   0.20806684  0.9713009 ]]

     [[ 0.2616124  -0.60064805  0.75550044]
      [-0.53597796 -0.7413841  -0.40382826]
      [ 0.80267465 -0.29928508 -0.51588935]]

     [[ 0.4752947  -0.37172344  0.7974438 ]
      [-0.16437629  0.852889    0.4955409 ]
      [-0.86433524 -0.36660883  0.3442711 ]]

     [[ 0.83131063  0.4779445   0.28371063]
      [-0.47808513  0.35454983  0.80357265]
      [ 0.28347358 -0.80365634  0.5232392 ]]

     [[ 0.5751311   0.03900152  0.817131  ]
      [-0.2759492  -0.93106997  0.23866446]
      [ 0.7701144  -0.36275    -0.5247249 ]]

     [[-0.6807762  -0.6099538  -0.4055862 ]
      [ 0.07149926 -0.6063983   0.79194   ]
      [-0.7289936   0.51013476  0.45643273]]

     [[ 0.2740054   0.6167242  -0.73795146]
      [ 0.6337515   0.4613638   0.6208885 ]
      [ 0.723381   -0.6378046  -0.2644337 ]]

     [[ 0.02657237 -0.9912923  -0.12897094]
      [ 0.27007505 -0.11709963  0.955692  ]
      [-0.96247256 -0.06022683  0.2646117 ]]

     [[ 0.75919664  0.46289822  0.45754305]
      [ 0.21626565  0.48362747 -0.8481354 ]
      [-0.61388075  0.7428524   0.2670594 ]]

     [[ 0.13419732  0.7730551  -0.6199814 ]
      [ 0.01575056  0.62389755  0.7813474 ]
      [ 0.99082947 -0.11461978  0.07154934]]

     [[ 0.79693866 -0.5938283  -0.11070973]
      [-0.44239753 -0.6985636   0.5623996 ]
      [-0.41130662 -0.39922032 -0.8194205 ]]

     [[-0.22713113 -0.6608967  -0.71528107]
      [ 0.9729143  -0.12155604 -0.19662638]
      [ 0.04300299 -0.74056715  0.670605  ]]

     [[ 0.8058346   0.03859074  0.5908818 ]
      [-0.50750047 -0.46910948  0.7227583 ]
      [ 0.30508006 -0.88229644 -0.35843983]]

     [[-0.8454198  -0.47147912  0.2509438 ]
      [-0.4824494   0.47254413 -0.737526  ]
      [ 0.22914608 -0.74458677 -0.62696296]]

     [[ 0.17157505  0.919783    0.35293233]
      [ 0.95262057 -0.24622187  0.17857464]
      [ 0.25114956  0.30557165 -0.9184497 ]]

     [[ 0.03022775 -0.19667654  0.98000234]
      [ 0.96350527 -0.25516328 -0.08092759]
      [ 0.26597717  0.9466837   0.18178587]]

     [[-0.9041375   0.40690884  0.13023265]
      [-0.25787845 -0.27672303 -0.9257014 ]
      [-0.3406377  -0.87054557  0.3551287 ]]

     [[ 0.7687602  -0.6344005   0.0808938 ]
      [-0.632561   -0.7356356   0.24229503]
      [-0.09420372 -0.23743704 -0.96682435]]

     [[ 0.04193974 -0.00535576  0.9991058 ]
      [-0.7404277   0.6712408   0.03467936]
      [-0.6708263  -0.74122     0.02418612]]

     [[-0.6622805   0.6703489   0.3346893 ]
      [ 0.22140734  0.6018422  -0.7673101 ]
      [-0.7157956  -0.43407184 -0.5470085 ]]

     [[ 0.00894117 -0.96657425 -0.25623092]
      [ 0.29809982  0.24716662 -0.92197895]
      [ 0.9544928  -0.06813882  0.29034555]]

     [[-0.09509467 -0.9904526  -0.0998034 ]
      [-0.64432764  0.13766427 -0.75225693]
      [ 0.75881416 -0.00722953 -0.6512671 ]]

     [[-0.9305973   0.3447069   0.12314964]
      [-0.24025165 -0.32136247 -0.91597235]
      [-0.2761663  -0.8819883   0.38187546]]

     [[ 0.48192862  0.10002189  0.87048286]
      [-0.66315746 -0.6076826   0.43697143]
      [ 0.572684   -0.7878563  -0.22652936]]

     [[ 0.90507764 -0.2945374  -0.30672824]
      [ 0.39986137  0.8349404   0.37813416]
      [ 0.14472514 -0.46488956  0.87346   ]]

     [[ 0.48447585 -0.7077471   0.51417625]
      [-0.8526892  -0.2507242   0.4583214 ]
      [-0.1954592  -0.6604782  -0.7249581 ]]

     [[-0.64288104  0.45185107  0.6184938 ]
      [-0.23015156  0.6562045  -0.71862775]
      [-0.73057115 -0.6043395  -0.31786725]]

     [[ 0.3051706  -0.8374807  -0.45331776]
      [-0.89213204 -0.08490215 -0.44372526]
      [ 0.33312368  0.53983116 -0.773053  ]]

     [[-0.32206497  0.9112062  -0.25686076]
      [-0.869473   -0.17734958  0.46104652]
      [ 0.37455428  0.37182042  0.8493872 ]]

     [[ 0.36106732 -0.7101037   0.6044693 ]
      [ 0.7567135   0.60192007  0.2551017 ]
      [-0.5449909   0.36530122  0.7546787 ]]

     [[ 0.2784756   0.9030173  -0.3271255 ]
      [ 0.5723424   0.11749122  0.811554  ]
      [ 0.7712817  -0.4132258  -0.48411667]]

     [[-0.3412885  -0.83527166 -0.43109557]
      [ 0.17580529 -0.50726277  0.84366876]
      [-0.9233714   0.21214558  0.3199681 ]]

     [[ 0.29190388 -0.9513335  -0.09877581]
      [ 0.58719295  0.25977066 -0.76663136]
      [ 0.75498116  0.16578221  0.63444436]]

     [[-0.13226686 -0.7524733  -0.64520496]
      [ 0.25284782  0.6037764  -0.75599074]
      [ 0.95842236 -0.2631312   0.11040162]]

     [[ 0.62349445 -0.19195779  0.75789636]
      [ 0.7480926  -0.13520728 -0.6496741 ]
      [ 0.2271831   0.9720449   0.05930121]]

     [[-0.3340281   0.42084858 -0.84339297]
      [ 0.60749245  0.7802727   0.14875284]
      [ 0.7206789  -0.46266723 -0.5162954 ]]

     [[-0.7137928  -0.55692726  0.424655  ]
      [-0.4062189   0.8231522   0.39674512]
      [-0.57051384  0.11069094 -0.8137945 ]]

     [[ 0.04948916  0.98905236 -0.13901877]
      [-0.8053667  -0.04280368 -0.59122956]
      [-0.5907075   0.14122054  0.7944315 ]]

     [[-0.8718017   0.4881776   0.04055191]
      [-0.41275287 -0.68747216 -0.597509  ]
      [-0.2638122  -0.5376473   0.8008361 ]]

     [[ 0.4465874  -0.0498378  -0.89335096]
      [-0.6495765   0.6685733  -0.36202222]
      [ 0.615313    0.74197435  0.26620296]]

     [[ 0.68048185  0.722134    0.1243663 ]
      [ 0.3168133  -0.13690114 -0.938556  ]
      [-0.6607373   0.67807126 -0.32194036]]

     [[-0.29298428  0.08057311 -0.95271623]
      [ 0.15083723  0.98785996  0.03715903]
      [ 0.94414425 -0.13281806 -0.30158085]]

     [[-0.19727239 -0.42594904 -0.8829785 ]
      [ 0.97395647 -0.1878395  -0.1269846 ]
      [-0.11176925 -0.8850332   0.4519114 ]]

     [[-0.58162045  0.6032319  -0.545737  ]
      [-0.80308783 -0.53260213  0.2671795 ]
      [-0.12948951  0.59367186  0.7942205 ]]

     [[-0.4366172   0.64718044  0.62491834]
      [-0.77699894 -0.62140095  0.10066504]
      [ 0.4534733  -0.44160882  0.77417284]]

     [[ 0.05435671 -0.76187783  0.64543587]
      [ 0.69972587  0.49019638  0.51970303]
      [-0.71234053  0.42337883  0.5597511 ]]]




.. GENERATED FROM PYTHON SOURCE LINES 394-396

Given any ``Source``, we can also take slices using typical slicing
syntax, or provide our own iterable of indices.

.. GENERATED FROM PYTHON SOURCE LINES 396-405

.. code-block:: Python


    sim_evens = sim[0::2]
    sim_odds = sim[1::2]

    # We can also generate random selections.
    # Shuffle indices then take the first 5.
    shuffled_inds = np.random.choice(sim.n, 5, replace=False)
    sim_shuffled_subset = sim[shuffled_inds]








.. GENERATED FROM PYTHON SOURCE LINES 406-408

Underneath those slices, ASPIRE relies on ``IndexedSource``, which
we can also call direcly to remap indices.

.. GENERATED FROM PYTHON SOURCE LINES 408-414

.. code-block:: Python


    from aspire.source import IndexedSource

    sim_shuffled_subset = IndexedSource(sim, shuffled_inds)









.. GENERATED FROM PYTHON SOURCE LINES 415-421

The ``noise`` Package
---------------------
The `aspire.noise
<https://computationalcryoem.github.io/ASPIRE-Python/aspire.noise.html>`_
package contains several useful classes for generating and
estimating different types of noise.

.. GENERATED FROM PYTHON SOURCE LINES 423-427

``NoiseAdder``
^^^^^^^^^^^^^^
``NoiseAdder`` subclasses are used to add common or customized noise
to ``Simulation`` image generation pipelines.

.. GENERATED FROM PYTHON SOURCE LINES 429-432

``WhiteNoiseAdder``
"""""""""""""""""""
``WhiteNoiseAdder`` is the most common type of synthetic noise.

.. GENERATED FROM PYTHON SOURCE LINES 432-435

.. code-block:: Python


    from aspire.noise import WhiteNoiseAdder








.. GENERATED FROM PYTHON SOURCE LINES 436-437

Get the sample variance, then create a NoiseAdder based on that variance.

.. GENERATED FROM PYTHON SOURCE LINES 437-443

.. code-block:: Python

    var = np.var(sim.images[:].asnumpy())
    print(f"Sample Variance: {var}")
    target_noise_variance = 10.0 * var
    print(f"Target Noise Variance: {target_noise_variance}")
    white_noise_adder = WhiteNoiseAdder(target_noise_variance)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sample Variance: 3.230210131732747e-05
    Target Noise Variance: 0.0003230210277251899




.. GENERATED FROM PYTHON SOURCE LINES 444-451

We can customize Sources by adding stages to their generation
pipeline.  In this case of a Simulation source, we want to corrupt
the projection images with noise.  Internally the
``WhiteNoiseAdder`` creates a ``ScalarFilter`` which is multiplied
(convolution) by a Gaussian random sample.  Similar to before, if
you require a different sample, this can be controlled via a
``seed``.

.. GENERATED FROM PYTHON SOURCE LINES 451-457

.. code-block:: Python


    # Creating the new simulation with this additional noise is easy:
    sim = Simulation(n=num_imgs, vols=vol_ds, noise_adder=white_noise_adder)
    # These should be rather noisy now ...
    sim.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_007.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 458-471

``WhiteNoiseEstimator``
"""""""""""""""""""""""
We can estimate the noise across an ``ImageSource``, and
we've generated a simulation with known noise variance.
Lets see how the estimate compares.

In this case, we know the noise to be white, so we can proceed directly to
`WhiteNoiseEstimator <https://computationalcryoem.github.io/ASPIRE-Python/aspire.noise.html#aspire.noise.noise.WhiteNoiseEstimator>`_.
The noise estimators consume from an ``ImageSource``.

The white noise estimator should log a diagnostic variance value.
Internally, it also uses the estimation results to build a
``Filter`` which can be used in more advanced denoising methods.

.. GENERATED FROM PYTHON SOURCE LINES 471-478

.. code-block:: Python


    from aspire.noise import WhiteNoiseEstimator

    noise_estimator = WhiteNoiseEstimator(sim)
    noise_estimator.estimate()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  3.17it/s]    100%|██████████| 1/1 [00:00<00:00,  3.17it/s]

    0.0003190270029178859



.. GENERATED FROM PYTHON SOURCE LINES 479-488

A Custom ``FunctionFilter``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

We will now apply some more interesting noise, using a custom
function, and then apply a ``whitening`` process to our data.

Using ``FunctionFilter`` we can create our own custom functions to
apply in a pipeline.  Here we want to apply a custom noise function.
We will use a function of two variables for this example.

.. GENERATED FROM PYTHON SOURCE LINES 488-506

.. code-block:: Python


    from aspire.noise import CustomNoiseAdder
    from aspire.operators import FunctionFilter


    def noise_function(x, y):
        return 1e-7 * np.exp(-(x * x + y * y) / (2 * 0.3**2))


    # In Python, functions are first class objects.  We take advantage of
    # that to pass this function around as a variable.  The function is
    # evaluated later, internally, during pipeline execution.
    custom_noise = CustomNoiseAdder(noise_filter=FunctionFilter(noise_function))

    # Create yet another Simulation source to tinker with.
    sim = Simulation(n=num_imgs, vols=vol_ds, noise_adder=custom_noise)
    sim.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_008.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 507-513

Noise Whitening
^^^^^^^^^^^^^^^
We will now combine a more advanced noise estimation technique with
an ``ImageSource`` preprocessing method ``whiten``.

First an anisotropic noise estimate is performed.

.. GENERATED FROM PYTHON SOURCE LINES 513-519

.. code-block:: Python


    from aspire.noise import AnisotropicNoiseEstimator

    # Estimate noise.
    aiso_noise_estimator = AnisotropicNoiseEstimator(sim)








.. GENERATED FROM PYTHON SOURCE LINES 520-524

Applying the ``Simulation.whiten()`` method requires passing a
corresponding ``NoiseEstimator`` instance.  Then we can inspect some
of the whitened images.  While noise is still present, we can see a
dramatic change.

.. GENERATED FROM PYTHON SOURCE LINES 524-528

.. code-block:: Python


    # Whiten based on the estimated noise.
    sim = sim.whiten(aiso_noise_estimator)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  3.18it/s]    100%|██████████| 1/1 [00:00<00:00,  3.18it/s]




.. GENERATED FROM PYTHON SOURCE LINES 529-530

What do the whitened images look like?

.. GENERATED FROM PYTHON SOURCE LINES 530-532

.. code-block:: Python

    sim.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_009.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 533-538

Common Image Corruptions
------------------------
``Simulation`` provides several configurable types of common cryo-EM
image corruptions.  Users should be aware that amplitude and offset
corruption is enabled by default.

.. GENERATED FROM PYTHON SOURCE LINES 540-544

Amplitudes
^^^^^^^^^^
Simulation automatically generates random amplitude variability.
To disable, set to ``amplitudes=1``.

.. GENERATED FROM PYTHON SOURCE LINES 546-550

Offsets
^^^^^^^
Simulation automatically generates random offsets.
To disable, set to ``offsets=0``.

.. GENERATED FROM PYTHON SOURCE LINES 552-556

Noise
^^^^^
By default, no noise corruption is configured.
To enable, see ``NoiseAdder`` components.

.. GENERATED FROM PYTHON SOURCE LINES 558-564

CTF
^^^
By default, no CTF corruption is configured.
To enable, we must configure one or more ``CTFFilter`` instances.
Usually we will create a range of filters for a variety of
defocus levels.

.. GENERATED FROM PYTHON SOURCE LINES 564-578

.. code-block:: Python


    from aspire.operators import RadialCTFFilter

    # Radial CTF Filter params.
    defocus_min = 15000  # unit is angstroms
    defocus_max = 25000
    defocus_ct = 7

    # Generate several CTFs.
    ctf_filters = [
        RadialCTFFilter(pixel_size=vol_ds.pixel_size, defocus=d)
        for d in np.linspace(defocus_min, defocus_max, defocus_ct)
    ]








.. GENERATED FROM PYTHON SOURCE LINES 579-582

Combining into a Simulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Here we'll combine the parameters above into a new simulation.

.. GENERATED FROM PYTHON SOURCE LINES 582-598

.. code-block:: Python


    sim = Simulation(
        n=num_imgs,
        vols=vol_ds,
        amplitudes=1,
        offsets=0,
        noise_adder=white_noise_adder,
        unique_filters=ctf_filters,
        seed=42,
    )

    # Simulation has two unique accessors ``clean_images`` which disables
    # noise, and ``projections`` which are clean uncorrupted projections.
    # Both act like calls to `image` and return show-able ``Image``
    # instances.








.. GENERATED FROM PYTHON SOURCE LINES 599-600

Clean projections.

.. GENERATED FROM PYTHON SOURCE LINES 600-602

.. code-block:: Python

    sim.projections[:3].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_010.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 603-604

Images with only CTF applied.

.. GENERATED FROM PYTHON SOURCE LINES 604-606

.. code-block:: Python

    sim.clean_images[:3].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_011.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 607-608

And now the first four corrupted images.

.. GENERATED FROM PYTHON SOURCE LINES 608-610

.. code-block:: Python

    sim.images[:4].show(columns=2, colorbar=False)




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_012.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 611-614

.. note::
    Above the ``show`` call has been customized as a 2 column grid
    with out colorbar legend.

.. GENERATED FROM PYTHON SOURCE LINES 616-621

Real Experimental Data - ``RelionSource``
-----------------------------------------

Now that we have some basics, we can try to replace the simulation
with a real experimental data source.

.. GENERATED FROM PYTHON SOURCE LINES 621-631

.. code-block:: Python


    from aspire.source import RelionSource

    src = RelionSource(
        "data/sample_relion_data.star",
        data_folder="",
        pixel_size=5.0,
        max_rows=1024,
    )








.. GENERATED FROM PYTHON SOURCE LINES 632-633

Add downsampling to the ``src`` pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 633-635

.. code-block:: Python

    src = src.downsample(img_size)








.. GENERATED FROM PYTHON SOURCE LINES 636-639

``RelionSource`` will auto-populate ``CTFFilter`` instances from the
STAR file metadata when available. Having these filters allows us to
perform a phase flipping correction.

.. GENERATED FROM PYTHON SOURCE LINES 639-641

.. code-block:: Python

    src = src.phase_flip()








.. GENERATED FROM PYTHON SOURCE LINES 642-643

Display the experimental data images.

.. GENERATED FROM PYTHON SOURCE LINES 643-645

.. code-block:: Python

    src.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_aspire_introduction_013.png
   :alt: aspire introduction
   :srcset: /auto_tutorials/images/sphx_glr_aspire_introduction_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 646-656

Pipeline Roadmap
----------------
Now that the primitives have been introduced we can explore
higher-level components.  The higher-level components are designed
to be modular and cacheable (to memory or disk) to support
experimentation with entire pipelines or focused algorithmic
development on specific components.  Most pipelines will follow a
flow of data and components moving mostly left to right in the table
below.  This table is not exhaustive, but represents some of the
most common components.

.. GENERATED FROM PYTHON SOURCE LINES 658-675

+----------------+--------------------+-----------------+----------------+---------------------+
|  Image Processing                                     | Ab initio                            |
+----------------+--------------------+-----------------+----------------+---------------------+
| Data           | Preprocessing      | Denoising       | Orientation    |  3D Reconstruction  |
+================+====================+=================+================+=====================+
|Simulation      | NoiseEstimator     | Class Averaging | CLSyncVoting   | MeanVolumeEstimator |
+----------------+--------------------+-----------------+----------------+---------------------+
|RelionSource    | downsample         | cov2d (CWF)     | CLSymmetryC2   |                     |
+----------------+--------------------+-----------------+----------------+---------------------+
|CoordinateSource| whiten             |                 | CLSymmetryC3C4 |                     |
+----------------+--------------------+-----------------+----------------+---------------------+
|                | phase_flip         |                 | CLSymmetryCn   |                     |
+----------------+--------------------+-----------------+----------------+---------------------+
|                |normalize_background|                 | CommonlineSDP  |                     |
+----------------+--------------------+-----------------+----------------+---------------------+
|                | CTFEstimator       |                 |                |                     |
+----------------+--------------------+-----------------+----------------+---------------------+

.. GENERATED FROM PYTHON SOURCE LINES 677-680

We're now ready to explore a small example end-to-end ab initio
pipeline using simulated data.
:ref:`sphx_glr_auto_tutorials_pipeline_demo.py`

.. GENERATED FROM PYTHON SOURCE LINES 682-684

Larger simulations and experiments based on EMPIAR data can be found
in :ref:`Experiments <exp>`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 28.649 seconds)


.. _sphx_glr_download_auto_tutorials_aspire_introduction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: aspire_introduction.ipynb <aspire_introduction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: aspire_introduction.py <aspire_introduction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: aspire_introduction.zip <aspire_introduction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
