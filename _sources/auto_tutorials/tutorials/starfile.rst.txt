
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorials/starfile.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorials_starfile.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorials_starfile.py:


Starfile
========

.. GENERATED FROM PYTHON SOURCE LINES 6-16

.. code-block:: Python


    import os

    import matplotlib.pyplot as plt
    import numpy as np

    from aspire.noise import AnisotropicNoiseEstimator
    from aspire.reconstruction import MeanEstimator
    from aspire.source import RelionSource








.. GENERATED FROM PYTHON SOURCE LINES 17-23

Sources
-------

Sources are an interface to various backend stores of data (np arrays, starfiles, etc)
They are intended to handle batching data conversion/prep behind the scenes.
Here we load a ".star" file using the RelionSource class

.. GENERATED FROM PYTHON SOURCE LINES 23-38

.. code-block:: Python


    data_folder = os.path.join(os.path.dirname(os.getcwd()), "data")
    file_path = os.path.join(data_folder, "sample_relion_data.star")

    source = RelionSource(
        file_path,
        pixel_size=1.338,
        max_rows=10000,
        data_folder=data_folder,
    )

    # Reduce the resolution
    L = 12  # You may try 16 but it takes a significant amount of time.
    source = source.downsample(L)








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Noise Estimation and Whitening
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: Python


    # Estimate noise in the ImageSource instance
    noise_estimator = AnisotropicNoiseEstimator(source)
    # Apply whitening to ImageSource
    source = source.whiten(noise_estimator)

    # Display subset of the images
    images = source.images[:10]
    images.show()




.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_starfile_001.png
   :alt: starfile
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_starfile_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 160.83it/s]




.. GENERATED FROM PYTHON SOURCE LINES 52-54

Estimate Mean Volume
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: Python


    # Estimate mean Volume
    mean_estimator = MeanEstimator(source, batch_size=8192)
    mean_est = mean_estimator.estimate()








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Visualize Volume
----------------

.. GENERATED FROM PYTHON SOURCE LINES 62-81

.. code-block:: Python


    # MeanEstimator.estimate() returns a Volume Instance,
    #   which is wrapper on an ndarray representing a stack of one or more 3d volumes.
    # We will visualize the data via orthogonal projections along the three axes.

    vol = mean_est.asnumpy()[0]
    # Visualize volume
    L = vol.shape[0]
    # Plots
    plt.suptitle("Orthogonal Projections", size=20)
    plt.subplot(1, 3, 1, title="x-axis")
    plt.imshow(np.sum(vol, axis=0), cmap="gray")
    plt.subplot(1, 3, 2, title="y-axis")
    plt.imshow(np.sum(vol, axis=1), cmap="gray")
    plt.subplot(1, 3, 3, title="z-axis")
    plt.imshow(np.sum(vol, axis=2), cmap="gray")
    plt.tight_layout()
    plt.subplots_adjust(top=1.25)
    plt.show()



.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_starfile_002.png
   :alt: Orthogonal Projections, x-axis, y-axis, z-axis
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_starfile_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.647 seconds)


.. _sphx_glr_download_auto_tutorials_tutorials_starfile.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: starfile.ipynb <starfile.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: starfile.py <starfile.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: starfile.zip <starfile.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
