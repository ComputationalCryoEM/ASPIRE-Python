
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorials/preprocess_imgs_sim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_tutorials_preprocess_imgs_sim.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorials_preprocess_imgs_sim.py:


Image Preprocessing
===================

This script illustrates the preprocess steps implemented prior to starting the pipeline of
reconstructing a 3D map using simulated 2D images.

.. GENERATED FROM PYTHON SOURCE LINES 8-23

.. code-block:: Python


    import os

    import matplotlib.pyplot as plt
    import numpy as np

    from aspire.noise import WhiteNoiseAdder
    from aspire.operators import RadialCTFFilter
    from aspire.source.simulation import Simulation
    from aspire.volume import Volume

    file_path = os.path.join(
        os.path.dirname(os.getcwd()), "data", "clean70SRibosome_vol_65p.mrc"
    )








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Specify Parameters
------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-50

.. code-block:: Python


    # Set the initial simulated full size of images.
    img_size = 33

    # Set the demonstration downsampled image size.
    ds_img_size = 15

    # Set the total number of images generated from the 3D map
    num_imgs = 512

    # Set the noise variance and build the noise filter
    noise_variance = 4e-1
    noise_adder = WhiteNoiseAdder(var=noise_variance)

    # Specify the CTF parameters not used for this example
    # but necessary for initializing the simulation object
    pixel_size = 5 * 65 / img_size  # Pixel size of the images (in angstroms)
    voltage = 200  # Voltage (in KV)
    defocus_min = 1.5e4  # Minimum defocus value (in angstroms)
    defocus_max = 2.5e4  # Maximum defocus value (in angstroms)
    defocus_ct = 7  # Number of defocus groups
    Cs = 2.0  # Spherical aberration
    alpha = 0.1  # Amplitude contrast








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Build Simulation Object and Apply Noise
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 53-80

.. code-block:: Python


    print("Initialize simulation object and CTF filters.")
    # Create CTF filters
    ctf_filters = [
        RadialCTFFilter(pixel_size, voltage, defocus=d, Cs=2.0, alpha=0.1)
        for d in np.linspace(defocus_min, defocus_max, defocus_ct)
    ]

    # Load the map file of a 70S ribosome and downsample the 3D map to desired image size.
    print("Load 3D map from mrc file")
    vols = Volume.load(file_path)

    # Downsample the volume to a desired image size and increase density
    # by 1.0e5 time for a better graph view
    print(f"Downsample map to a image size of {img_size} x {img_size} x {img_size}")
    vols = vols.downsample(img_size) * 1.0e5

    # Create a simulation object with specified filters and the downsampled 3D map
    print("Use downsampled map to create simulation object.")
    source = Simulation(
        L=img_size,
        n=num_imgs,
        vols=vols,
        unique_filters=ctf_filters,
        noise_adder=noise_adder,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Initialize simulation object and CTF filters.
    Load 3D map from mrc file
    Downsample map to a image size of 33 x 33 x 33
    Use downsampled map to create simulation object.




.. GENERATED FROM PYTHON SOURCE LINES 81-88

Apply Independent Preprocessing Techniques
------------------------------------------
Now we'll apply each technique sequentially.  This is easily
accomplished because each preprocessing technique returns a new
``ImageSource`` object.  In this case we assign each to a new
variable ``source_*``.  That leaves the original ``source`` object
untouched.

.. GENERATED FROM PYTHON SOURCE LINES 88-108

.. code-block:: Python


    print("Obtain original images.")
    imgs_od = source.images[0].asnumpy()

    print("Perform phase flip to input images.")
    source_pf = source.phase_flip()

    print(f"Downsample image size to {ds_img_size} X {ds_img_size}")
    source_ds = source.downsample(ds_img_size)

    print("Normalize images to background noise.")
    source_nb = source.normalize_background()

    print("Whiten noise of images")
    source_wt = source.whiten()

    print("Invert the global density contrast if need")
    source_rc = source.invert_contrast()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Obtain original images.
    Perform phase flip to input images.
    Downsample image size to 15 X 15
    Normalize images to background noise.
    Whiten noise of images
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]
    Invert the global density contrast if need
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]




.. GENERATED FROM PYTHON SOURCE LINES 109-112

Plot First Image from Each Preprocess Step
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Plot the first images.

.. GENERATED FROM PYTHON SOURCE LINES 112-147

.. code-block:: Python


    print("Plot first image from each preprocess steps")
    idm = 0
    plt.subplot(2, 3, 1)
    plt.imshow(imgs_od[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("original image")

    plt.subplot(2, 3, 2)
    plt.imshow(source_pf.images[0].asnumpy()[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("phase flip")

    plt.subplot(2, 3, 3)
    plt.imshow(source_ds.images[0].asnumpy()[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("downsample")

    plt.subplot(2, 3, 4)
    plt.imshow(source_nb.images[0].asnumpy()[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("normalize background")

    plt.subplot(2, 3, 5)
    plt.imshow(source_wt.images[0].asnumpy()[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("noise whitening")

    plt.subplot(2, 3, 6)
    plt.imshow(source_rc.images[0].asnumpy()[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("invert contrast")
    plt.tight_layout()





.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_preprocess_imgs_sim_001.png
   :alt: original image, phase flip, downsample, normalize background, noise whitening, invert contrast
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_preprocess_imgs_sim_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Plot first image from each preprocess steps




.. GENERATED FROM PYTHON SOURCE LINES 148-154

Apply Sequential Preprocessing Techniques
-----------------------------------------
Now we'll apply each technique sequentially.
This is accomplished by reassigning each new ``ImageSource`` to the same variable.
In this case we reassign to ``source``.
Note, after each ``source`` assignment we'll manually save off the images for the plot below.

.. GENERATED FROM PYTHON SOURCE LINES 154-184

.. code-block:: Python


    # We'll copy ``source`` so we can use it in a later section.
    # Since ``source`` objects are designed to follow an immutable usage by default (like Numpy arrays),
    # we can copy a source just by copying the object.
    source_copy = source

    print("Obtain original images.")
    imgs_seq_od = source.images[0].asnumpy()

    print("Perform phase flip to input images.")
    source = source.phase_flip()
    imgs_seq_pf = source.images[0].asnumpy()

    print(f"Downsample image size to {ds_img_size} X {ds_img_size}")
    source = source.downsample(ds_img_size)
    imgs_seq_ds = source.images[0].asnumpy()

    print("Normalize images to background noise.")
    source = source.normalize_background()
    imgs_seq_nb = source.images[0].asnumpy()

    print("Whiten noise of images")
    source = source.whiten()
    imgs_seq_wt = source.images[0].asnumpy()

    print("Invert the global density contrast if need")
    source = source.invert_contrast()
    imgs_seq_rc = source.images[0].asnumpy()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Obtain original images.
    Perform phase flip to input images.
    Downsample image size to 15 X 15
    Normalize images to background noise.
    Whiten noise of images
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]    100%|██████████| 1/1 [00:00<00:00,  1.45it/s]
    Invert the global density contrast if need
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.33it/s]    100%|██████████| 1/1 [00:00<00:00,  1.33it/s]




.. GENERATED FROM PYTHON SOURCE LINES 185-188

Plot First Image from Each Preprocess Step
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Plot the first images.

.. GENERATED FROM PYTHON SOURCE LINES 188-223

.. code-block:: Python


    print("Plot first image from each preprocess steps")
    idm = 0
    plt.subplot(2, 3, 1)
    plt.imshow(imgs_od[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("original image")

    plt.subplot(2, 3, 2)
    plt.imshow(imgs_seq_pf[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("phase flip")

    plt.subplot(2, 3, 3)
    plt.imshow(imgs_seq_ds[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("downsample")

    plt.subplot(2, 3, 4)
    plt.imshow(imgs_seq_nb[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("normalize background")

    plt.subplot(2, 3, 5)
    plt.imshow(imgs_seq_wt[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("noise whitening")

    plt.subplot(2, 3, 6)
    plt.imshow(imgs_seq_rc[idm], cmap="gray")
    plt.colorbar(orientation="horizontal")
    plt.title("invert contrast")
    plt.tight_layout()





.. image-sg:: /auto_tutorials/tutorials/images/sphx_glr_preprocess_imgs_sim_002.png
   :alt: original image, phase flip, downsample, normalize background, noise whitening, invert contrast
   :srcset: /auto_tutorials/tutorials/images/sphx_glr_preprocess_imgs_sim_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Plot first image from each preprocess steps




.. GENERATED FROM PYTHON SOURCE LINES 224-227

Apply Chained Preprocessing Techniques
--------------------------------------
Now we'll apply the preprocessing in a chain syntax

.. GENERATED FROM PYTHON SOURCE LINES 227-249

.. code-block:: Python


    # We'll reset our ``source`` to the reference copy we started with.
    source = source_copy

    print("Perform phase flip to input images.")
    print(f"Downsample image size to {ds_img_size} X {ds_img_size}")
    print("Normalize images to background noise.")
    print("Whiten noise of images")
    print("Invert the global density contrast if need")
    source = (
        source.phase_flip()
        .downsample(ds_img_size)
        .normalize_background()
        .whiten()
        .invert_contrast()
    )
    # Assign the first image from the preprocessed chain.
    imgs_chained = source.images[0].asnumpy()

    # This preprocessing chain should correspond to applying each
    # operation sequentially.
    assert np.allclose(imgs_chained, imgs_seq_rc)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Perform phase flip to input images.
    Downsample image size to 15 X 15
    Normalize images to background noise.
    Whiten noise of images
    Invert the global density contrast if need
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.41it/s]    100%|██████████| 1/1 [00:00<00:00,  1.41it/s]
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00,  1.28it/s]    100%|██████████| 1/1 [00:00<00:00,  1.28it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.588 seconds)


.. _sphx_glr_download_auto_tutorials_tutorials_preprocess_imgs_sim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: preprocess_imgs_sim.ipynb <preprocess_imgs_sim.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: preprocess_imgs_sim.py <preprocess_imgs_sim.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: preprocess_imgs_sim.zip <preprocess_imgs_sim.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
