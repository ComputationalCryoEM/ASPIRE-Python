
import itertools
import logging

import numpy as np
import pytest

from aspire.source import MicrographSource, Simulation

logger = logging.getLogger(__name__)
IMG_SIZES = [12, 13]
DTYPES = [np.float32, np.float64]
PARTICLES_PER_MICROGRAPHS = [4, 7]
MICROGRAPH_COUNTS = [1, 2]
MICROGRAPH_SIZES = [100, 101]
SIM_PARTICLES = [1, 2]
BOUNDARIES = [-1, 0, None]

def sim_fixture_id(params):
    sim_particles = params[0]
    img_size = params[1]
    dtype = params[2]
    return f"number of volumes={sim_particles}, image size={img_size}, dtype={dtype.__name__}"

@pytest.fixture(params=itertools.product(SIM_PARTICLES, IMG_SIZES, DTYPES), ids=sim_fixture_id)
def sim_fixture(request):
    sim_particles, img_size, dtype = request.param
    simulation = Simulation(C=sim_particles, L=img_size, dtype=dtype)
    return simulation

def micrograph_fixture_id(params):
    particles_per_micrograph = params[0]
    micrograph_count = params[1]
    micrograph_size = params[2]
    boundary = params[3]
    return f"particles per micrograph={particles_per_micrograph}, micrograph count={micrograph_count}, micrograph size={micrograph_size}, boundary={boundary}"

@pytest.fixture(
    params=itertools.product(
        PARTICLES_PER_MICROGRAPHS, MICROGRAPH_COUNTS, MICROGRAPH_SIZES, BOUNDARIES
    ), ids=micrograph_fixture_id
)
def micrograph_fixture(sim_fixture, request):
    """
    Construct a MicrographSource.
    """
    (
        particles_per_micrograph,
        micrograph_count,
        micrograph_size,
        boundary,
    ) = request.param
    return MicrographSource(
        simulation=sim_fixture,
        interparticle_distance=0,
        particles_per_micrograph=particles_per_micrograph,
        micrograph_count=micrograph_count,
        micrograph_size=micrograph_size,
        boundary=boundary,
    )



def test_micrograph_source_has_correct_values(sim_fixture, micrograph_fixture):
    """
    Test the MicrographSource has the correct values from arguments.
    """
    s = sim_fixture
    m = micrograph_fixture
    assert s.L == m.particle_box_size
    assert s == m.simulation
    assert m.particles_per_micrograph * m.micrograph_count <= s.n
    assert len(m) == m.micrograph_count
    assert m.clean_micrographs[0].shape[1] == m.micrograph_size


def test_micrograph_raises_error_simulation():
    """
    Test that MicrographSource raises error when simulation argument is not a Simulation
    """
    for fake_simulation in ["Simulation", 513.747104]:
        with pytest.raises(Exception) as e_info:
            _ = MicrographSource(
                fake_simulation,
                micrograph_size=100,
                particles_per_micrograph=20,
                interparticle_distance=10,
               )
        assert str(e_info.value) == "Simulation should be of type Simulation"


def test_micrograph_raises_error_image_size(sim_fixture):
    """
    Test the MicrographSource class raises errors when the image size is larger than micrograph size.
    """
    with pytest.raises(Exception) as e_info:
        s = sim_fixture
        _ = MicrographSource(
            s,
            micrograph_size=s.L - 1,
            particles_per_micrograph=10,
            interparticle_distance=0,
        )
    assert (
        str(e_info.value)
        == "The micrograph size must be larger or equal to the simulation's image size."
    )



def test_micrograph_raises_error_collisions(sim_fixture):
    """
    Test the MicrographSource class raises errors when the interparticle_distance is too large.
    """
    with pytest.raises(Exception) as e_info:
        s = sim_fixture
        _ = MicrographSource(
            s,
            micrograph_size=s.L * 10,
            particles_per_microgaph=20,
            interparticle_distance=10,
        )
        assert (
            str(e_info.value)
            == "The particle count times micrograph count must be less than or equal to the number o\
f images generated by the simulation (particles_per_micrograph * micrograph_count <= simulation.n)"
        )



def test_micrograph_centers_match(micrograph_fixture):
    """
    Test that the Micrograph's centers are forming at generated points.
    """
    m = micrograph_fixture
    centers = np.reshape(m.centers, (m.total_particle_count, 2))
    for i, center in enumerate(centers):
        if (
            center[0] >= 0
            and center[0] < m.micrograph_size
            and center[1] >= 0
            and center[1] < m.micrograph_size
        ):
            assert m.clean_micrographs[i // m.particles_per_micrograph].asnumpy()[0][
                tuple(center)
            ] != np.max(
                m.clean_micrographs[i // m.particles_per_micrograph].asnumpy()[0]
            )
