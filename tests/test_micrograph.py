import itertools
import logging

import numpy as np
import pytest

from aspire.image import Image
from aspire.source import MicrographSource, Simulation

logger = logging.getLogger(__name__)
IMG_SIZES = [12, 13]
DTYPES = [np.float32, np.float64]
PARTICLES_PER_MICROGRAPHS = [5, 7, 10]
MICROGRAPH_COUNTS = [1, 2, 3]
MICROGRAPH_SIZES = [100, 300]
SIM_PARTICLES = [1, 2]
BOUNDARIES = [-1, 0, 1]


@pytest.fixture(params=itertools.product(SIM_PARTICLES, IMG_SIZES, DTYPES))
def sim_fixture(request):
    sim_particles, img_size, dtype = request.param
    simulation = Simulation(C=sim_particles, L=img_size, dtype=dtype)
    return simulation


@pytest.fixture(
    params=itertools.product(
        PARTICLES_PER_MICROGRAPHS, MICROGRAPH_COUNTS, MICROGRAPH_SIZES, BOUNDARIES
    )
)
def micrograph_fixture(sim_fixture, request):
    """
    Construct a MicrographSource
    """
    (
        particles_per_micrograph,
        micrograph_count,
        micrograph_size,
        boundary,
    ) = request.param
    return MicrographSource(
        simulation=sim_fixture,
        interparticle_distance=0,
        particles_per_micrograph=particles_per_micrograph,
        micrograph_count=micrograph_count,
        micrograph_size=micrograph_size,
        boundary=boundary,
    )


# Test the MicrographSource class has correct values
def test_micrograph_source_has_correct_values(sim_fixture, micrograph_fixture):
    s = sim_fixture
    m = micrograph_fixture
    assert s.L == m.particle_box_size
    assert s == m.simulation
    assert m.particles_per_micrograph * m.micrograph_count <= s.n
    assert len(m) == m.micrograph_count


# Test the MicrographSource class raises errors when the image size is larger than micrograph size
def test_micrograph_raises_error_image_size(sim_fixture):
    with pytest.raises(Exception) as e_info:
        s = sim_fixture
        mic = MicrographSource(
            s,
            micrograph_size=s.L - 1,
            particles_per_micrograph=10,
            interparticle_distance=0,
        )
    assert (
        str(e_info.value)
        == "The micrograph size must be larger or equal to the simulation's image size."
    )


# Test the MicrographSource class raises errors when the interparticle_distance is too large
def test_micrograph_raises_error_collisions(sim_fixture):
    with pytest.raises(Exception) as e_info:
        s = sim_fixture
        mic = MicrographSource(
            s,
            micrograph_size=sL * 10,
            particles_per_microgaph=20,
            interparticle_distance=10,
        )
        assert (
            str(e_info.value)
            == "The particle count times micrograph count must be less than or equal to the number o\
f images generated by the simulation (particles_per_micrograph * micrograph_count <= simulation.n)"
        )


# Test that the Micrograph's centers aren't equal to the pedestal value (0)
def test_micrograph_centers_match(micrograph_fixture):
    m = micrograph_fixture
    centers = np.reshape(m.centers, (m.total_particle_count, 2))
    for i, center in enumerate(centers):
        assert (
            m.clean_micrographs[i // m.particles_per_micrograph].asnumpy()[0][
                tuple(center)
            ]
            != 0
        )
