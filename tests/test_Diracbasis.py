from unittest import TestCase

import numpy as np

from aspire.basis import DiracBasis
from aspire.utils.matlab_compat import m_flatten


class DiracBasisTestCase(TestCase):
    def setUp(self):
        self.basis = DiracBasis((8, 8))

    def tearDown(self):
        pass

    def testDiracEvaluate(self):
        v = np.array(
            [
                [
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    -1.08106869e-17,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                ],
                [
                    0.00000000e00,
                    0.00000000e00,
                    -6.40456062e-03,
                    -3.32961020e-03,
                    -1.36887927e-02,
                    -5.42770488e-03,
                    7.63680861e-03,
                    0.00000000e00,
                ],
                [
                    0.00000000e00,
                    3.16377602e-03,
                    -9.31273350e-03,
                    9.46128404e-03,
                    1.93239220e-02,
                    3.79891953e-02,
                    1.06841173e-02,
                    -2.36467925e-03,
                ],
                [
                    0.00000000e00,
                    1.72736955e-03,
                    -1.00710814e-02,
                    4.93520304e-02,
                    3.77702656e-02,
                    6.57365438e-02,
                    3.94739462e-03,
                    -4.41228496e-03,
                ],
                [
                    4.01551066e-18,
                    -3.08071647e-03,
                    -1.61670565e-02,
                    8.66886286e-02,
                    5.09898409e-02,
                    7.19313349e-02,
                    1.68313715e-02,
                    5.19180892e-03,
                ],
                [
                    0.00000000e00,
                    2.87262215e-03,
                    -3.37732956e-02,
                    4.51706505e-02,
                    5.72215879e-02,
                    4.63553081e-02,
                    1.86552175e-03,
                    1.12608805e-02,
                ],
                [
                    0.00000000e00,
                    2.77905016e-03,
                    -2.77499404e-02,
                    -4.02645374e-02,
                    -1.54969139e-02,
                    -1.66229153e-02,
                    -2.07389259e-02,
                    6.64060546e-03,
                ],
                [
                    0.00000000e00,
                    0.00000000e00,
                    5.20080934e-03,
                    -1.06788196e-02,
                    -1.14761672e-02,
                    -1.27443126e-02,
                    -1.15563484e-02,
                    0.00000000e00,
                ],
            ]
        )
        coeffs = m_flatten(v)
        result = self.basis.evaluate(coeffs)
        self.assertTrue(np.allclose(result, v))

    def testDiracEvaluate_t(self):
        x = np.array(
            [
                [
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                    -1.08106869e-17,
                    0.00000000e00,
                    0.00000000e00,
                    0.00000000e00,
                ],
                [
                    0.00000000e00,
                    0.00000000e00,
                    -6.40456062e-03,
                    -3.32961020e-03,
                    -1.36887927e-02,
                    -5.42770488e-03,
                    7.63680861e-03,
                    0.00000000e00,
                ],
                [
                    0.00000000e00,
                    3.16377602e-03,
                    -9.31273350e-03,
                    9.46128404e-03,
                    1.93239220e-02,
                    3.79891953e-02,
                    1.06841173e-02,
                    -2.36467925e-03,
                ],
                [
                    0.00000000e00,
                    1.72736955e-03,
                    -1.00710814e-02,
                    4.93520304e-02,
                    3.77702656e-02,
                    6.57365438e-02,
                    3.94739462e-03,
                    -4.41228496e-03,
                ],
                [
                    4.01551066e-18,
                    -3.08071647e-03,
                    -1.61670565e-02,
                    8.66886286e-02,
                    5.09898409e-02,
                    7.19313349e-02,
                    1.68313715e-02,
                    5.19180892e-03,
                ],
                [
                    0.00000000e00,
                    2.87262215e-03,
                    -3.37732956e-02,
                    4.51706505e-02,
                    5.72215879e-02,
                    4.63553081e-02,
                    1.86552175e-03,
                    1.12608805e-02,
                ],
                [
                    0.00000000e00,
                    2.77905016e-03,
                    -2.77499404e-02,
                    -4.02645374e-02,
                    -1.54969139e-02,
                    -1.66229153e-02,
                    -2.07389259e-02,
                    6.64060546e-03,
                ],
                [
                    0.00000000e00,
                    0.00000000e00,
                    5.20080934e-03,
                    -1.06788196e-02,
                    -1.14761672e-02,
                    -1.27443126e-02,
                    -1.15563484e-02,
                    0.00000000e00,
                ],
            ]
        )
        result = self.basis.evaluate_t(x)
        self.assertTrue(np.allclose(result, m_flatten(x)))
